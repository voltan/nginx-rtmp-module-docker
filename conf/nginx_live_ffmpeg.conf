worker_processes  auto;
#error_log  logs/error.log;

events {
    worker_connections  1024;
}

# RTMP configuration
rtmp {
    server {
		listen 1935; # Listen on standard RTMP port
		chunk_size 4000;
		# ping 30s;
		# notify_method get;

		# This application is to accept incoming stream
		application live {
			live on; # Allows live input

			# for each received stream, transcode for adaptive streaming
			# This single ffmpeg command takes the input and transforms
			# the source into 4 different streams with different bitrates
			# and qualities. # these settings respect the aspect ratio.
			exec_push  /usr/local/bin/ffmpeg -i rtmp://localhost:1935/$app/$name -async 1 -vsync -1
			-c:v libx264 -c:a aac -b:v 256k  -b:a 64k  -vf "scale=240:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/show/$name_low
			-c:v libx264 -c:a aac -b:v 330k  -b:a 64k  -vf "scale=360:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/show/$name_mid
			-c:v libx264 -c:a aac -b:v 512k  -b:a 128k -vf "scale=480:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/show/$name_high
			-c:v libx264 -c:a aac -b:v 1024k -b:a 128k -vf "scale=720:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/show/$name_hd
			-c copy -f flv rtmp://localhost:1935/show/$name_src;
		}

		# This is the HLS application
		application show {
			live on; # Allows live input from above application
			deny play all; # disable consuming the stream from nginx as rtmp

			hls on; # Enable HTTP Live Streaming
			hls_fragment 3;
			hls_playlist_length 20;
			hls_path /mnt/hls/;  # hls fragments path

			# Instruct clients to adjust resolution according to bandwidth
            hls_variant _src  BANDWIDTH=6815744;  # Source bitrate, source resolution
            hls_variant _hd   BANDWIDTH=4456448;  # High bitrate, HD 720p resolution
            hls_variant _high BANDWIDTH=2621440;  # High bitrate, higher-than-SD resolution
            hls_variant _mid  BANDWIDTH=1179648;  # Medium bitrate, SD resolution
            hls_variant _low  BANDWIDTH=655360;   # Low bitrate, sub-SD resolution
		}
	}
}

http {
	sendfile off;
	tcp_nopush on;
	directio 512;
	# aio on;

	# HTTP server required to serve the player and HLS fragments
	server {
		listen 443 ssl;

        # Add domain as server name
		server_name www.example.com;

		# Add ssl root
        ssl_certificate	  /etc/letsencrypt/live/www.example.com/fullchain.pem;
        ssl_certificate_key	  /etc/letsencrypt/live/www.example.com/privkey.pem;

		# Serve HLS fragments
		location /hls {
			types {
				application/vnd.apple.mpegurl m3u8;
				video/mp2t ts;
			}

			root /mnt;

            add_header Cache-Control no-cache; # Disable cache

			# CORS setup
			add_header 'Access-Control-Allow-Origin' '*' always;
			add_header 'Access-Control-Expose-Headers' 'Content-Length';

			# allow CORS preflight requests
			if ($request_method = 'OPTIONS') {
				add_header 'Access-Control-Allow-Origin' '*';
				add_header 'Access-Control-Max-Age' 1728000;
				add_header 'Content-Type' 'text/plain charset=UTF-8';
				add_header 'Content-Length' 0;
				return 204;
			}
		}

		# This URL provides RTMP statistics in XML
		location /stat {
			rtmp_stat all;
			rtmp_stat_stylesheet stat.xsl; # Use stat.xsl stylesheet
		}

		location /stat.xsl {
			# XML stylesheet to view RTMP stats.
			root /usr/local/nginx/html;
		}
	}

	# HTTP server required for port 80 to setup ssl
	server {
        listen 80;
        server_name www.example.com;
        location /.well-known {
            alias /var/www/.well-known;
        }
    }
}