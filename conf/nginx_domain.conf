worker_processes  auto;
#error_log  logs/error.log;

events {
    use epoll;
    worker_connections  1024;
}

# RTMP configuration
rtmp {
    server {
		listen 1935; # Listen on standard RTMP port
		chunk_size 4000;
		# ping 30s;
		# notify_method get;

		# This application is to accept incoming stream
		application live {
			live on; # Allows live input
			push rtmp://localhost:1935/show;
		}

		# This is the HLS application
		application show {
			live on; # Allows live input from above application
            deny play all; # disable consuming the stream from nginx as rtmp

			hls on; # Enable HTTP Live Streaming
			hls_fragment 3;
			hls_playlist_length 10;
			hls_path /mnt/hls/;  # hls fragments path
		}
	}
}

http {

	log_format  main  '$remote_addr $remote_user [$time_local] "$request" $status "$http_referer" "$http_user_agent"';

    access_log  /dev/stdout  main;
    error_log   stderr debug;

    default_type  application/octet-stream;
    #include       /usr/local/nginx/conf/mime.types;

    sendfile    on;
   	tcp_nopush  on;
   	tcp_nodelay on;

    vod_mode                           local;
    vod_metadata_cache                 metadata_cache 16m;
    vod_response_cache                 response_cache 512m;
    vod_last_modified_types            *;
    vod_segment_duration               9000;
    vod_align_segments_to_key_frames   on;
    vod_dash_fragment_file_name_prefix "segment";
    vod_hls_segment_file_name_prefix   "segment";
    vod_manifest_segment_durations_mode accurate;

   	open_file_cache          max=1000 inactive=5m;
   	open_file_cache_valid    2m;
   	open_file_cache_min_uses 1;
   	open_file_cache_errors   on;

   	aio on;


	# HTTPS server required to serve the player and HLS fragments
	server {
		listen 443 ssl;

        # Add domain as server name
		server_name www.example.com;

		# Add ssl root
        ssl_certificate	  /etc/letsencrypt/live/www.example.com/fullchain.pem;
        ssl_certificate_key	  /etc/letsencrypt/live/www.example.com/privkey.pem;

        location /vod/ {
        	vod hls;
        	alias /opt/static/videos/;
        	add_header Access-Control-Allow-Headers '*';
        	add_header Access-Control-Allow-Origin '*';
        	add_header Access-Control-Allow-Methods 'GET, HEAD, OPTIONS';
        }

		# Serve HLS fragments
		location /hls {
			types {
				application/vnd.apple.mpegurl m3u8;
				video/mp2t ts;
			}

			root /mnt;

            add_header Cache-Control no-cache; # Disable cache

			# CORS setup
			add_header 'Access-Control-Allow-Origin' '*' always;
			add_header 'Access-Control-Expose-Headers' 'Content-Length';

			# allow CORS preflight requests
			if ($request_method = 'OPTIONS') {
				add_header 'Access-Control-Allow-Origin' '*';
				add_header 'Access-Control-Max-Age' 1728000;
				add_header 'Content-Type' 'text/plain charset=UTF-8';
				add_header 'Content-Length' 0;
				return 204;
			}
		}

		# This URL provides RTMP statistics in XML
		location /stat {
			rtmp_stat all;
			rtmp_stat_stylesheet stat.xsl; # Use stat.xsl stylesheet
		}

		location /stat.xsl {
			# XML stylesheet to view RTMP stats.
			root /usr/local/nginx/html;
		}
	}

	# HTTP server required for port 80 to setup ssl
	server {
        listen 80;
        server_name www.example.com;
        location /.well-known {
            alias /var/www/.well-known;
        }
    }
}
